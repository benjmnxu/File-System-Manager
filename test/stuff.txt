


// fn run_backend(from_gui: mpsc::Receiver<Command>, to_gui: mpsc::Sender<BackendResponse>) {
//     let visited_inodes: Arc<Mutex<HashSet<u64>>> = Arc::new(Mutex::new(HashSet::new()));
//     let small_file_threshold = 1024; // Define threshold in bytes (e.g., 1 KB)
//     let mut fs_root = None;
//     let mut kernel = None;
//     let mut current_node = None;

//     loop {
//         match from_gui.recv() {
//             Ok(command) => match command {
//                 Command::LoadDirectory(path) => {
//                     if fs_root.is_none() {
//                         fs_root = FileSystemNode::build_fs_model(
//                             &path,
//                             Arc::clone(&visited_inodes),
//                             small_file_threshold,
//                             None,
//                         );
//                         if let Some(ref root) = fs_root {
//                             current_node = Some(root.clone());
//                             kernel = Kernel::new(root.clone());
//                             to_gui
//                                 .send(BackendResponse::Response(format!(
//                                     "Directory loaded: {}",
//                                     path
//                                 )))
//                                 .unwrap();
//                         } else {
//                             to_gui
//                                 .send(BackendResponse::Error(
//                                     "Failed to load directory.".to_string(),
//                                 ))
//                                 .unwrap();
//                         }
//                     } else {
//                         to_gui
//                             .send(BackendResponse::Error(
//                                 "Directory already loaded.".to_string(),
//                             ))
//                             .unwrap();
//                     }
//                 }
//                 Command::Del(index) => {
//                     if let Some(kernel) = &mut kernel {
//                         if let Some(current_node) = &current_node {
//                             kernel.mark_for_deletion(current_node.clone(), index);
//                             to_gui
//                                 .send(BackendResponse::Response(format!(
//                                     "Marked index {} for deletion.",
//                                     index
//                                 )))
//                                 .unwrap();
//                         } else {
//                             to_gui
//                                 .send(BackendResponse::Error(
//                                     "No directory loaded.".to_string(),
//                                 ))
//                                 .unwrap();
//                         }
//                     } else {
//                         to_gui
//                             .send(BackendResponse::Error(
//                                 "Kernel not initialized.".to_string(),
//                             ))
//                             .unwrap();
//                     }
//                 }
//                 Command::Commit => {

//                 }
//                 Command::Display => {
//                     if let Some(kernel) = &kernel {
//                         let display = kernel.display(fs_root.clone().unwrap());
//                         to_gui
//                             .send(BackendResponse::Response(display.to_string()))
//                             .unwrap();
//                     } else {
//                         to_gui
//                             .send(BackendResponse::Error(
//                                 "Nothing to display; no directory loaded.".to_string(),
//                             ))
//                             .unwrap();
//                     }
//                 }
//                 Command::Up => {
//                     if let Some(parent) = kernel.get_parent(current_node.clone()) {
//                         current_node = parent.upgrade().expect("Error unwrapping parent upgrade");
//                     }
//                 }
//                 Command::Down(index) => {

//                 }
//                 Command::Status => {

//                 }
//                 Command::Open(index) => {

//                 }
//                 Command::GoTo(index) => {

//                 }
//                 Command::Exit => {
//                     to_gui.send(BackendResponse::Response("Exiting backend.".to_string())).unwrap();
//                     break;
//                 }
//                 Command::Error(message) => {

//                 }
//             },
//             Err(_) => {
//                 // Handle the sender being disconnected
//                 break;
//             }
//         }
//     }
// }


// pub fn handle_job(root_path: &str) {
//     // let root_path = "/Users/benjaminxu/Desktop";
//     let visited_inodes: Arc<Mutex<HashSet<u64>>> = Arc::new(Mutex::new(HashSet::new()));
//     let small_file_threshold = 1024; // Define threshold in bytes (e.g., 1 KB)
//     if let Some(fs_root) = FileSystemNode::build_fs_model(root_path, visited_inodes, small_file_threshold, None) {
//         if let Some(mut kernel) = Kernel::new(fs_root.clone()) {    
//             let mut current_node = fs_root;
//             let mut redisplay = true;
//             loop {
//                 if redisplay {
//                     kernel.display(current_node.clone());
//                 }
//                 let mut input = String::new();
//                 std::io::stdin().read_line(&mut input).expect("Failed to read input");
//                 let input = input.trim();
        
//                 if input == "exit" {
//                     break;
//                 } else if input == ".." {
//                     if let Some(parent) = kernel.get_parent(current_node.clone()) {
//                         current_node = parent.upgrade().expect("Error unwrapping parent upgrade");
//                     }
//                     redisplay = true;
//                 } else if input == "commit" {
//                     kernel.commit_deletions();
//                     redisplay = false;
//                 } else if input.starts_with("del ") {
//                     if let Ok(index) = input[4..].trim().parse::<usize>() {
//                         kernel.mark_for_deletion(current_node.clone(), index);
//                         kernel.display(current_node.clone());
//                     } else {
//                         println!("Invalid input for del command.");
//                     }
//                     redisplay = true;
//                 } else if input == "status" {
//                   let status = kernel.get_status();
//                   println!("{}\n", status);  
//                   redisplay = false;
//                 } else if let Ok(index) = input.parse::<usize>() {
//                     if let Some(child_node) = kernel.get_child(current_node.clone(), index) {
//                         current_node = child_node;
//                     }
//                     redisplay = true;
//                 } else if input.starts_with("open ") {
//                     if let Ok(index) = input[5..].trim().parse::<usize>() {
//                         kernel.open_file(current_node.clone(), index);
//                     } else {
//                         println!("Invalid input for del command.");
//                     }
//                     redisplay = false;
//                 } else if input.starts_with("go to ") {
//                     if let Ok(path) = input[6..].trim().parse::<String>() {
//                         if let Some(node) = kernel.go_to(path) {
//                             current_node = node;
//                             redisplay = true;
//                         } else {
//                             println!("Invalid path.");
//                             redisplay = false;
//                         }
//                     } else {
//                         println!("Invalid input for go to command.");
//                         redisplay = false;
//                     }
//                 } else {
//                     println!("Invalid input.");
//                 }
//             }
//         } else {

//         }
//     } else {
//         eprintln!("Error reading file system.");
    // }
// }
// use rayon::prelude::*;
// use rayon::current_num_threads;
// use std::time::Instant;
// use std::ffi::CStr;
// use walkdir::WalkDir;
// use std::process::Command;
// use std::os::raw::c_void;
// use libc::*;
// use std::mem;


// fn fetch_file_system_with_walkdir(path: &str) -> Vec<(String, u64, bool)> {
//     WalkDir::new(path)
//         .into_iter()
//         .par_bridge() // Parallelize the iterator
//         .filter_map(|entry| entry.ok())
//         .filter_map(|entry| {
//             let metadata = entry.metadata().ok()?;
//             let is_file = metadata.is_file();
//             let size = if is_file { metadata.len() } else { 0 };
//             Some((entry.path().to_string_lossy().to_string(), size, is_file))
//         })
//         .collect()
// }

// fn fetch_file_system_with_exec(path: &str) -> Vec<(String, u64, bool)> {
//     let output = Command::new("find")
//         .arg(path)
//         .arg("-ls")
//         .output()
//         .expect("Failed to execute find");

//     if !output.status.success() {
//         eprintln!("Find command failed: {:?}", output.status);
//         return Vec::new();
//     }

//     let stdout = String::from_utf8_lossy(&output.stdout);
//     stdout
//         .lines()
//         .filter_map(|line| {
//             let parts: Vec<&str> = line.split_whitespace().collect();
//             if parts.len() < 11 {
//                 return None;
//             }
//             let size = parts[6].parse::<u64>().ok()?;
//             let path = parts[10..].join(" ");
//             let is_file = !path.ends_with('/');
//             Some((path, size, is_file))
//         })
//         .collect()
// }

// // const VDIR: u32 = 1; // Directory
// const VREG: u32 = 1; // Regular file

// // fn main() {

// //     let path = "/";

// //     println!("Benchmarking getattrlistbulk...");
// //     let start = Instant::now();
// //     let getattrlistbulk_results = fetch_file_system_with_getattrlistbulk_parallel(path);
// //     let getattrlistbulk_duration = start.elapsed();
// //     println!("GetAttrListBulk Duration: {:?}", getattrlistbulk_duration);

// //     // // Benchmark WalkDir
// //     // println!("Benchmarking WalkDir...");
// //     // let start = Instant::now();
// //     // let walkdir_results = fetch_file_system_with_walkdir(path);
// //     // let walkdir_duration = start.elapsed();
// //     // println!("WalkDir Duration: {:?}", walkdir_duration);

// //     // // Benchmark find
// //     // println!("Benchmarking find...");
// //     // let start = Instant::now();
// //     // let find_results = fetch_file_system_with_exec(path);
// //     // let find_duration = start.elapsed();
// //     // println!("Find Duration: {:?}", find_duration);

// //     // Benchmark getattrlistbulk

// //     // // Validate results
// //     // println!("WalkDir Results Count: {}", walkdir_results.len());

// //     // let mut sum = 0;
// //     // for r in walkdir_results {
// //     //     sum += r.1;
// //     // }
// //     // println!("Find Results Count: {}", find_results.len());
// //     println!("GetAttrListBulk Results Count: {}", getattrlistbulk_results.len());

// //     let mut gsum: u128 = 0;
// //     for r in getattrlistbulk_results {
// //         gsum += r.1 as u128;
// //     }

// //     println!(" {}", gsum);
// // }

// // fn compare_results(walkdir_results: Vec<String>, getattrlistbulk_results: Vec<(String, u64, bool)>) {
// //     let walkdir_paths: HashSet<_> = walkdir_results.into_iter().collect();
// //     let getattrlistbulk_paths: HashSet<_> = getattrlistbulk_results.into_iter().map(|(p, _, _)| p).collect();

// //     let only_in_walkdir = walkdir_paths.difference(&getattrlistbulk_paths);
// //     let only_in_getattrlistbulk = getattrlistbulk_paths.difference(&walkdir_paths);

// //     println!("Entries only in WalkDir: {:?}", only_in_walkdir);
// //     println!("Entries only in GetAttrListBulk: {:?}", only_in_getattrlistbulk);
// // }
